import numpy as np 
import matplotlib.pyplot as plt
import scipy
from scipy.signal import filtfilt
from scipy import stats

# Goals:
# 1 - Compute FFT using Numpy "fft" function
# 2 - Plot the frequency spectrum using matplotlib

# Construct a time signal
Fs = 2000 # sampling frequency
tstep = 1 / Fs # sample time interval
f0 = 100 # signal frequency

N = int(10 * Fs / f0) # number of samples
t = np.linspace(0, (N-1)*tstep, N) # time steps
fstep = Fs / N # frequency interval
f = np.linspace(0, (N-1)*fstep, N) # frequency steps

y = 1 * np.sin(2 * np.pi * f0 * t) # sine wave

# perform fft
X = np.fft.fft(y)
X_mag = np.abs(X) / N

f_plot = f[0:int(N/2+1)]
X_mag_plot = 2 * X_mag[0:int(N/2+1)]
X_mag_plot[0] = X_mag_plot[0] / 2 # Note: DC component does not need to multiply by 2

# plot
fig, [ax1, ax2] = plt.subplots(nrows=2, ncols=1)
ax1.plot(t, y, '.-')
ax2.plot(f_plot, X_mag_plot, '.-')
ax1.set_xlabel("time (s)")
ax2.set_xlabel("freq (Hz)")

ax1.grid()
ax2.grid()


plt.tight_layout()
plt.show()
################################################################################
def butter_bandpass_filter(data, lowcut, highcut, fs, order=2):
    nyq = 0.5 * fs
    low = lowcut /nyq
    high = highcut/nyq
    b, a = scipy.signal.butter(order, [low, high], btype='band')
    #print(b,a)
    y = scipy.signal.filtfilt(b, a, data, axis=0)
    return y

# Filtered signal
filtered_signal = butter_bandpass_filter(y, 1, 4, f0)

N = len(filtered_signal) # number of samples
t = np.linspace(0, (N-1)*tstep, N) # time steps
fstep = Fs / N # frequency interval
f = np.linspace(0, 8, N) # frequency steps

# perform fft
X = np.fft.fft(filtered_signal)
X_mag = np.abs(X) / N

f_plot = f[0:int(N/2+1)]
X_mag_plot = 2 * X_mag[0:int(N/2+1)]
X_mag_plot[0] = X_mag_plot[0] / 2 # Note: DC component does not need to multiply by 2

# plot
fig, [ax1, ax2] = plt.subplots(nrows=2, ncols=1)
ax1.plot(t, filtered_signal, '.-')
ax2.plot(f_plot, X_mag_plot, '.-')
ax1.set_xlabel("time (s)")
ax2.set_xlabel("freq (Hz)")

ax1.grid()
ax2.grid()


plt.tight_layout()
plt.show()
